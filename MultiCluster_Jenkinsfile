pipeline {
	//Servers
	agent { label 'any'}
	
	//Parameters
	parameters {
		string ( name: 'NAMESPACE', description: 'Kurulum yapılacak Proje adını giriniz' )
        string ( name: 'REPO', description: 'Repo adını giriniz' )
	}
	
	stages{
	    stage('control') {
            steps {
                script {
                    if (!params.NAMESPACE.isEmpty()) { 
			if (params.REPO.isEmpty()) { 
                            error('Repo Alani Boş') 
                        }
                    }
		     else { error('Proje Alani Boş') }
                }
            }
        }
	  stage('action') {
	      steps {
		  script {
			def clusters = [ "https://api.mycluster1.mydomain:6443","https://api.mycluster2.mydomain:6443"]
                          for (int i=1; i < 3; ++i) {
                    
                               def cluster = clusters[i]
			       git branch:"master", url: "${params.REPO}"
			       withCredentials([string(credentialsId: "ocp_creds${i}", variable: 'TOKEN')]) {
			           sh '''
                                       echo "###### ${cluster} ######"
			               oc login --token ${TOKEN} ${cluster} --insecure-skip-tls-verify=true
                                       ARGOCD_SERVER_PASSWORD=$(oc get secret openshift-gitops-cluster -n openshift-gitops -o jsonpath='{.data.admin\\.password}' | base64 -d)
                                       ARGOCD_ROUTE=$(oc -n openshift-gitops get route openshift-gitops-server -n openshift-gitops -o jsonpath='{.spec.host}')
                                       score=$(polaris audit --config /opt/check_yaml_valiation/custom_check.yaml --audit-path . --format score)										
			               if [ $(oc get project "${NAMESPACE}" | wc -l) -gt 0 ]; then
                                           oc project $NAMESPACE
                                       else
                                         "Proje Bulunamadı"
                                         exit 5
                                       fi
                                   
                                       if [[ $score -lt '80' ]];then
                                              echo "Yaml dosyanızda aşağıdaki eksiklikler bulunmaktadır."
                                              kube-score score * --output-format ci | grep -vE "NetworkPolicy|podAntiAffinity|PodDisruptionBudget"
                                              exit 15
                                       else                              
                                           argocd --insecure --grpc-web login ${ARGOCD_ROUTE}:443 --username admin --password ${ARGOCD_SERVER_PASSWORD}
                                           if [[ $(argocd app list | grep -c "${NAMESPACE}") -eq '0' ]];then
                                               argocd app create "${NAMESPACE}" --repo "${REPO}" --path . --revision "master" --project default --dest-namespace "${NAMESPACE}" --dest-server https://kubernetes.default.svc --directory-recurse
                                           fi
                                           argocd app sync "${NAMESPACE}"
                                       fi
			           '''
			           }//cred
                               }//foreach
			    }//script
			}//steps
		   }//stage
		}
}
